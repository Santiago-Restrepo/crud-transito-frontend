import Head from 'next/head'
import { useState, useMemo, useEffect } from 'react'
import MaterialReactTable from 'material-react-table';
import type { MRT_ColumnDef } from 'material-react-table';
//Components
import { TableSelector } from '@/components/TableSelector'
import { TableModal } from '@/components/TableModal'
//Icons
import {IoNewspaperSharp} from 'react-icons/io5'
import {AiFillCar, AiFillDelete, AiFillEdit} from 'react-icons/ai'
import {MdBadge} from 'react-icons/md'
import {FaUser} from 'react-icons/fa'
//Data
import tablesInfo from '@/data/tables'

interface HomeProps {
  data: any
}
export default function Home({
  data
}: HomeProps) {
  const [tables, setTables] = useState(tablesInfo)
  const [tableData, setTableData] = useState(data);
  const [loading, setLoading] = useState(false);
  const columns = useMemo(
    () => {
      const firstRow = tableData[0]
      const columns: MRT_ColumnDef[] = []
      for (const key in firstRow) {
        columns.push({
          accessorKey: key,
          header: key,
        })
      }
      return columns
    },
    [tableData]
  );
  const [modal, setModal] = useState({
    show: false,
    data: null,
    columns: null
  })

  const fetchTableData = async (url: string) => {
    const res = await fetch(url)
    const data = await res.json()
    return data
  }

  const handleChangeTable = async (index: number) => {
    if(tables[index].selected) return;
    setLoading(true)
    const newTableData = await fetchTableData(`https://crud-transito-backend.vercel.app${tables[index].path}`);
    setTableData(newTableData)
    const newTables = tables.map((table, i) => {
      if(i === index) return {...table, selected: true}
      return {...table, selected: false}
    })
    setTables(newTables)
    setLoading(false)
  }

  const handleDelete = async (id: string) => {
    console.log(id)
  }

  const handleEdit = async (data: any) => {
    console.log(data)
  }

  const handleAdd = async () => {
    setModal({
      show: true,
      data: null,
      columns: null
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='p-5'>
        <h1 className="text-2xl font-bold text-center text-gray-200">Selecciona una tabla</h1>
        <div className="tableButtons flex flex-wrap justify-center">
          {
            tables.map((table, index) => (
              <TableSelector
                key={table.name}
                title={table.name}
                icon={table.icon}
                onClick={() => {
                  handleChangeTable(index)
                }} 
                selected={table.selected}
              />
            ))
          }
        </div>
        {
          loading ? <h1 className="text-xl font-bold text-center text-gray-100">Cargando...</h1> : 
          (
            <>
              <div className="table w-full overflow-x-scroll">
                <MaterialReactTable
                  columns={columns}
                  data={tableData}
                  muiTableContainerProps={{
                    sx: { maxHeight: '600px', maxWidth: '90vw', background: "#000000" }, //give the table a max height
                  }}
                  muiTableProps={{
                    sx: { background: "#000000" }, //give the table a max height
                  }}
                  muiTableBodyProps={{
                    sx: {
                      //stripe the rows, make odd rows a darker color
                      background: "#000000",
                    },
                  }}
                  enableEditing={true}
                  renderRowActions={({ row, table }) => (
                    <div className='buttons flex'>
                      <button
                        className='mr-2 bg-gray-400 text-white p-2 rounded-md'
                        onClick={() => handleEdit(row)}
                      >
                        <AiFillEdit size={20}/>
                      </button>
                      <button
                        className='bg-red-500 text-white p-2 rounded-md'
                        onClick={() => handleDelete(row.id)}
                      >
                        <AiFillDelete size={20}/>
                      </button>
                    </div>
                  )}
                  renderTopToolbarCustomActions={() => (
                    <button
                      className='bg-green-500 text-white font-medium p-2 rounded-md'
                      onClick={handleAdd}
                    >
                      Crear nuevo
                    </button>
                  )}
                />
              </div>
              <TableModal
                show={modal.show}
                data={modal.data}
                columns={modal.columns}
                onClose={() => setModal({...modal, show: false})}
              />
            </>
          )
        }
      </main>
    </>
  )
}

//Get server side props
export async function getServerSideProps() {
  try {
    const url = 'https://crud-transito-backend.vercel.app'
    const res = await fetch(`${url}/api/infraccion`)
    const data = await res.json()
    return {
      props: {
        data
      }
    }
  } catch (error) {
    console.log(error)
    return{
      props: {
        data: []
      }
    }
  }
}
